"""add_plaid_imports_and_staging_tables

Revision ID: d3cd29b45ed7
Revises: 1ea3c9c66d03
Create Date: 2025-08-18 13:14:35.999986

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd3cd29b45ed7'
down_revision = '1ea3c9c66d03'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plaid_imports',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('mode', sa.String(length=10), nullable=False),
    sa.Column('created_by', sa.String(length=255), nullable=True),
    sa.Column('summary_json', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['institution_items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_plaid_imports_id'), 'plaid_imports', ['id'], unique=False)
    op.create_table('staging_transactions',
    sa.Column('import_id', sa.Integer(), nullable=False),
    sa.Column('plaid_transaction_id', sa.String(length=255), nullable=False),
    sa.Column('plaid_pending_transaction_id', sa.String(length=255), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('authorized_date', sa.Date(), nullable=True),
    sa.Column('name', sa.String(length=500), nullable=True),
    sa.Column('merchant_name', sa.String(length=500), nullable=True),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('pf_category_primary', sa.String(length=100), nullable=True),
    sa.Column('pf_category_detailed', sa.String(length=200), nullable=True),
    sa.Column('suggested_category_id', sa.Integer(), nullable=True),
    sa.Column('suggested_subcategory_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('exclude_reason', sa.String(length=100), nullable=True),
    sa.Column('hash_key', sa.String(length=64), nullable=False),
    sa.Column('raw_json', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['import_id'], ['plaid_imports.id'], ),
    sa.ForeignKeyConstraint(['suggested_category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['suggested_subcategory_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_staging_hash_key', 'staging_transactions', ['hash_key'], unique=False)
    op.create_index('ix_staging_import_status', 'staging_transactions', ['import_id', 'status'], unique=False)
    op.create_index('ix_staging_plaid_transaction_id', 'staging_transactions', ['plaid_transaction_id'], unique=False)
    op.create_index(op.f('ix_staging_transactions_hash_key'), 'staging_transactions', ['hash_key'], unique=False)
    op.create_index(op.f('ix_staging_transactions_id'), 'staging_transactions', ['id'], unique=False)
    
    # Add columns to existing tables using batch mode for SQLite
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_enabled_for_import', sa.Boolean(), nullable=True))
    
    # Skip foreign key constraints for merchant_rules for now due to SQLite limitations
    # op.create_foreign_key(None, 'merchant_rules', 'categories', ['subcategory_id'], ['id'])
    
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('external_id', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('import_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('raw_json', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=True))
        batch_op.drop_index('ix_transactions_txn_type_date')
        batch_op.create_index('ix_transactions_external_id', ['external_id'], unique=True)
        batch_op.create_index('ix_transactions_import_id', ['import_id'], unique=False)
        batch_op.create_index('ix_transactions_is_deleted', ['is_deleted'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_index('ix_transactions_is_deleted')
        batch_op.drop_index('ix_transactions_import_id')
        batch_op.drop_index('ix_transactions_external_id')
        batch_op.create_index('ix_transactions_txn_type_date', ['txn_type', 'posted_date'], unique=False)
        batch_op.drop_column('is_deleted')
        batch_op.drop_column('raw_json')
        batch_op.drop_column('import_id')
        batch_op.drop_column('external_id')
    
    with op.batch_alter_table('accounts', schema=None) as batch_op:
        batch_op.drop_column('is_enabled_for_import')
    
    op.drop_index(op.f('ix_staging_transactions_id'), table_name='staging_transactions')
    op.drop_index(op.f('ix_staging_transactions_hash_key'), table_name='staging_transactions')
    op.drop_index('ix_staging_plaid_transaction_id', table_name='staging_transactions')
    op.drop_index('ix_staging_import_status', table_name='staging_transactions')
    op.drop_index('ix_staging_hash_key', table_name='staging_transactions')
    op.drop_table('staging_transactions')
    op.drop_index(op.f('ix_plaid_imports_id'), table_name='plaid_imports')
    op.drop_table('plaid_imports')
    # ### end Alembic commands ###


